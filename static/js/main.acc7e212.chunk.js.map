{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAIaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAC,UAAY,SACRC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCLLI,G,YAAO,SAACC,GAAD,OAChB,sBAAKJ,UAAU,iBAAf,UACI,qBAAKK,IAAK,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACvB,mCAAMJ,EAAMG,QAAQE,KAApB,OACA,kCAAKL,EAAMG,QAAQG,MAAnB,YCFKC,EAAW,SAACP,GAAD,OAEnB,qBAAKJ,UAAU,YAAf,SACII,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UC+BdM,E,kDAjCb,aAAe,IAAD,8BACZ,gBAcFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACJ,SAAUa,S,oBAO3C,WAAU,IAAD,EACyBC,KAAKN,MAA9BR,EADA,EACAA,SAAUK,EADV,EACUA,YACXU,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK7B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWF,YAAY,kBAAiBC,aAAgB2B,KAAK3B,eAC7D,cAAC,EAAD,CAAUa,SAAWe,W,GA5BXI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA2BC,SAASC,eAAe,SAKrFZ,M","file":"static/js/main.acc7e212.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n    className = 'search'\r\n        type='search' \r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt =\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './card-list.styles.css';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => (\r\n      \r\n     <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n          <Card key={monster.id} monster = {monster} />\r\n          ))}\r\n    </div>    \r\n\r\n);\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.components';\n\nclass App extends Component {\n  constructor (){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState( {monsters: users} ));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className='App'>\n        <h1> Monster Rolodex </h1>\n        <SearchBox placeholder='search monsters'handleChange = {this.handleChange}/>\n        <CardList monsters ={filteredMonsters} />\n      </div>\n    );\n  }\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}